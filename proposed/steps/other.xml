<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 xmlns:p="http://www.w3.org/ns/xproc"
	 xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"
	 xmlns:pxp="http://exproc.org/proposed/steps"
	 xml:id="proposed.steps.other"
         version="5.0">
<info>
  <title>Other Proposed Steps</title>
</info>

<para>This page collects proposed extension steps. Implementation welcome, but
contents subject to change at any time.</para>

<para>These steps are in the “proposed extension namespace”, 
<uri>http://exproc.org/proposed/steps</uri>, identified by the prefix
“<literal>pxp</literal>”.</para>

<section xml:id="nvdl">
<title>pxp:nvdl</title>

<para>A step for performing <link xlink:href="http://www.nvdl.org/">NVDL</link>
(Namespace-based Validation Dispatching Language) validation over
mixed-namespace documents.</para>

<p:declare-step type="pxp:nvdl">
  <p:input port="source" primary="true"/>
  <p:input port="nvdl"/>
  <p:input port="schemas" sequence="true"/>
  <p:output port="result"/>
  <p:option name="assert-valid" select="'true'" e:type="xsd:boolean"/>
</p:declare-step>

<para>The <port>source</port> document is validated using the namespace
dispatching rules contained in the <port>nvdl</port> document.</para>

<para>The dispatching rules may contain URI references that point to
the actual schemas to be used. As long as these schemas are
accessible, it is not necessary to pass anything on the
<port>schemas</port> port. However, if one or more schemas are
provided on the <port>schemas</port> port, then these schemas
<rfc2119>should</rfc2119> be used in validation.</para>

<para>This requirement is expressed only as a “should” and not a
“must” because XProc version 1.0 does not mandate that implementations
support caching of documents so that requests for a URI by one step
can automatically access the result of some other step if that result
had a base URI identical to the requested document.</para>

<para>However, it's not clear that the <port>schemas</port> port has
any value if the implementation does not support this behavior.</para>

<para>The value of the <option>assert-valid</option> option
<rfc2119>must</rfc2119> be a boolean. It is a <glossterm>dynamic error</glossterm>
if the <option>assert-valid</option> option is <literal>true</literal>
and the input document is not valid.</para>

<para>The output from this step is a copy of the input, possibly
augmented by application by schema processing. The output of this step
<rfc2119>may</rfc2119> include PSVI annotations.</para>

</section>

<section xml:id="unzip">
<title>pxp:unzip</title>

<para>A step for extracting information out of ZIP archives.</para>

<p:declare-step type="pxp:unzip">
  <p:output port="result"/>
  <p:option name="href" required="true" e:type='xsd:anyURI'/>
  <p:option name="file" e:type="xsd:string"/>
  <p:option name="content-type" e:type="xsd:string"/>
</p:declare-step>

<para>The value of the <option>href</option> option
<rfc2119>must</rfc2119> be an IRI. It is a <glossterm>dynamic
error</glossterm> if the document so identified does not exist or
cannot be read.</para>

<para>The value of the <option>file</option> option, if specified,
<rfc2119>must</rfc2119> be the fully qualified path-name of a document
in the archive. It is <glossterm>dynamic error</glossterm> if the
value specified does not identify a file in the archive.</para>

<para>The output from the <tag>pxp:unzip</tag> step <rfc2119>must</rfc2119>
conform to the
<link xlink:href="schemas/ziptoc.rnc">ziptoc.rnc</link> schema.
</para>

<para>If the <option>file</option> option is specified, the selected file
in the archive is extracted and returned:</para>

<itemizedlist>
<listitem>
<para>If the <option>content-type</option>
is not specified, or if an XML content type is specified, the file is parsed
as XML and returned. It is a <glossterm>dynamic error</glossterm> if the
file is not well-formed XML.</para>
</listitem>
<listitem>
<para>If the <option>content-type</option> specified is not an XML content
type, the file is base64 encoded and returned in a single <tag>c:data</tag>
element.</para>
</listitem>
</itemizedlist>

<para>If the <option>file</option> option <emphasis>is not</emphasis> specified,
a table of contents for the archive is returned.</para>

<para>For example, the contents of the XML Calabash 0.8.5 distribution archive
might be reported like this:</para>

<informalexample>
<programlisting><![CDATA[<c:zipfile xmlns:c="http://www.w3.org/ns/xproc-step"
           href="http://xmlcalabash.com/download/calabash-0.8.5.zip">
   <c:directory name="calabash-0.8.5/" date="2008-11-04T19:29:20.000-05:00"/>
   <c:directory name="calabash-0.8.5/docs/" date="2008-11-04T19:29:20.000-05:00"/>
   <c:file compressed-size="11942" size="36677" name="calabash-0.8.5/docs/CDDL+GPL.txt"
           date="2008-11-04T19:29:20.000-05:00"/>
   <c:file compressed-size="928" size="2110" name="calabash-0.8.5/docs/ChangeLog"
           date="2008-11-04T19:29:20.000-05:00"/>
   <c:file compressed-size="6817" size="17987" name="calabash-0.8.5/docs/GPL.txt"
           date="2008-11-04T19:29:20.000-05:00"/>
   <c:file compressed-size="494" size="830" name="calabash-0.8.5/docs/NOTICES"
           date="2008-11-04T19:29:20.000-05:00"/>
   <c:directory name="calabash-0.8.5/lib/" date="2008-11-04T19:29:20.000-05:00"/>
   <c:file compressed-size="389650" size="407421" name="calabash-0.8.5/lib/calabash.jar"
           date="2008-11-04T19:29:20.000-05:00"/>
   <c:file compressed-size="1237" size="2493" name="calabash-0.8.5/README"
           date="2008-11-04T19:29:20.000-05:00"/>
   <c:directory name="calabash-0.8.5/xpl/" date="2008-11-04T19:29:20.000-05:00"/>
   <c:file compressed-size="175" size="255" name="calabash-0.8.5/xpl/pipe.xpl"
           date="2008-11-04T19:29:20.000-05:00"/>
</c:zipfile>]]></programlisting>
</informalexample>

</section>

<section xml:id="zip">
<title>pxp:zip</title>

<para>A step for creating ZIP archives.</para>

<p:declare-step type="pxp:zip">
  <p:input port="source" sequence="true" primary="true"/>
  <p:input port="manifest"/>
  <p:output port="result"/>
  <p:option name="href" required="true" e:type="xsd:anyURI"/>
  <p:option name="compression-method" e:type="stored|deflated"/>
  <p:option name="compression-level"
	    e:type="smallest|fastest|default|huffman|none"/>
  <p:option name="command" select="'update'" e:type="update|freshen|create|delete"/>
</p:declare-step>

<para>The ZIP archive is identified by the <option>href</option>. The <option>manifest</option>
(described below) provides the list of files to be processed in the archive.
The <option>command</option>
indicates the nature of the processing: “<literal>update</literal>”, “<literal>freshen</literal>”,
“<literal>create</literal>”, or “<literal>delete</literal>”.</para>

<para>If files are added to the archive,
<option>compression-method</option> indicates how they should be added: “<literal>stored</literal>”
or “<literal>deflated</literal>”. For deflated files, the <option>compression-level</option> identifies
the kind of compression: “<literal>smallest</literal>”, “<literal>fastest</literal>”,
“<literal>default</literal>”, “<literal>huffman</literal>”, or “<literal>none</literal>”.</para>

<para>The entries identified by the <option>manifest</option> are processed. The manifest
must conform to the following schema:</para>

<programlisting><![CDATA[default namespace c="http://www.w3.org/ns/xproc-step"

start = zip-manifest

zip-manifest =
   element c:zip-manifest {
      entry*
   }

entry =
   element c:entry {
      attribute name { text }
    & attribute href { text }
    & attribute comment { text }?
    & attribute method { "deflated" | "stored" }
    & attribute level { "smallest" | "fastest" | "huffman" | "default" | "none" }
      empty
   }]]></programlisting>

<para>For example:</para>

<programlisting><![CDATA[<zip-manifest xmlns="http://www.w3.org/ns/xproc-step">
  <entry name="file1.xml" href="http://example.org/file1.xml" comment="An example file"/>
  <entry name="path/to/file2.xml" href="http://example.org/file2.xml" method="stored"/>
</zip-manifest>]]></programlisting>

<para>If the <option>command</option> is “<literal>delete</literal>”, then <filename>file1.xml</filename>
and <filename>path/to/file2.xml</filename> will be deleted from the archive. Otherwise, the
file that appears on the <port>source</port> port that has the base URI
<uri>http://example.org/file1.xml</uri> will be stored in the archive as <filename>file1.xml</filename> (using
the default method and level),
the file that appears on the <port>source</port> port that has the base URI
<uri>http://example.org/file2.xml</uri> will be stored in the archive as
<filename>path/to/file2.xml</filename> without being compressed.</para>

<para>A <tag>c:zipfile</tag> description of the archive content is produced on the
<port>result</port> port.</para>

</section>

<section xml:id="gunzip">
<title>pxp:gunzip</title>

<important><para>Deprecated: See <link linkend="uncompress">pxp:uncompress</link>.</para>
</important>

<para>A step for expanding gzipped data.</para>

<p:declare-step type="pxp:gunzip">
   <p:input port="source"/>
   <p:output port="result"/>
</p:declare-step>

<para>If the document that appears on the <port>source</port> port is
<literal>base64</literal> encoded, this step will attempt to decode and
<application>gunzip</application> the data. As a convenience, if the data
is not encoded, it is simply passed through, like the <tag>p:identity</tag>
step.</para>

<para>It is a <glossterm>dynamic error</glossterm> if the resulting, decoded
and expanded data is not a well-formed XML document.</para>

</section>

<section xml:id="gzip">
<title>pxp:gzip</title>

<important><para>Deprecated: See <link linkend="compress">pxp:compress</link>.</para>
</important>

<para>A step for storing gzip compressed data.</para>

<p:declare-step type="pxp:gzip">
  <p:input port="source"/>
  <p:output port="result"/>
  <p:option name="href" e:type="xsd:anyURI"/>
  <p:option name="byte-order-mark" e:type="xsd:boolean"/>
  <p:option name="cdata-section-elements" select="''" e:type="ListOfQNames"/>
  <p:option name="doctype-public" e:type="xsd:string"/>
  <p:option name="doctype-system" e:type="xsd:anyURI"/>
  <p:option name="encoding" e:type="xsd:string"/>
  <p:option name="escape-uri-attributes" select="'false'" e:type="xsd:boolean"/>
  <p:option name="include-content-type" select="'true'" e:type="xsd:boolean"/>
  <p:option name="indent" select="'false'" e:type="xsd:boolean"/>
  <p:option name="media-type" e:type="xsd:string"/>
  <p:option name="method" select="'xml'" e:type="xsd:QName"/>
  <p:option name="normalization-form" select="'none'" e:type="NormalizationForm"/>
  <p:option name="omit-xml-declaration" select="'true'" e:type="xsd:boolean"/>
  <p:option name="standalone" select="'omit'" e:type="true|false|omit"/>
  <p:option name="undeclare-prefixes" e:type="xsd:boolean"/>
  <p:option name="version" select="'1.0'" e:type="xsd:string"/>
</p:declare-step>

<para>The <tag>pxp:gzip</tag> step serializes the document that appears on its
<port>source</port> port and compresses it with <application>gzip</application>.
If the input document is <literal>base64</literal> encoded, it is decoded and
the corresponding bytes are compressed.
</para>

<para>If the <tag class="attribute">href</tag> attribute is present, the step attempts
to store the compressed data to the IRI specified. In this case, it produces a
<tag>c:result</tag> element on its <port>result</port> port that contains the
IRI where the data was stored.</para>

<para>If the
<tag class="attribute">href</tag> attribute is not present, the step returns
the compressed data in a <literal>base64</literal> encoded <tag>c:data</tag> element
with the content type “<literal>application/x-gzip</literal>”.
</para>

</section>

<section xml:id="compress">
<title>pxp:compress</title>

<para>A step for storing compressed data.</para>

<p:declare-step type="pxp:compress">
  <p:input port="source"/>
  <p:output port="result"/>
  <p:option name="href" e:type="xsd:anyURI"/>
  <p:option name="compression-method" e:type="xsd:string"/>
  <p:option name="byte-order-mark" e:type="xsd:boolean"/>
  <p:option name="cdata-section-elements" select="''" e:type="ListOfQNames"/>
  <p:option name="doctype-public" e:type="xsd:string"/>
  <p:option name="doctype-system" e:type="xsd:anyURI"/>
  <p:option name="encoding" e:type="xsd:string"/>
  <p:option name="escape-uri-attributes" select="'false'" e:type="xsd:boolean"/>
  <p:option name="include-content-type" select="'true'" e:type="xsd:boolean"/>
  <p:option name="indent" select="'false'" e:type="xsd:boolean"/>
  <p:option name="media-type" e:type="xsd:string"/>
  <p:option name="method" select="'xml'" e:type="xsd:QName"/>
  <p:option name="normalization-form" select="'none'" e:type="NormalizationForm"/>
  <p:option name="omit-xml-declaration" select="'true'" e:type="xsd:boolean"/>
  <p:option name="standalone" select="'omit'" e:type="true|false|omit"/>
  <p:option name="undeclare-prefixes" e:type="xsd:boolean"/>
  <p:option name="version" select="'1.0'" e:type="xsd:string"/>
</p:declare-step>

<para>The <tag>pxp:compress</tag> step serializes the document that appears on its
<port>source</port> port and compresses it.
If the input document is <literal>base64</literal> encoded, it is decoded and
the corresponding bytes are compressed.
</para>

<para>The <option>compression-method</option> option can be used to identify the
compression method used. Suggested values are
“<literal>bzip2</literal>”,
“<literal>compress</literal>”,
“<literal>gzip</literal>”, etc. If unspecified, the default method is
<glossterm>implementation defined</glossterm>.</para>

<note>
<para>Would it be better to specify a default? Perhaps <literal>gzip</literal>?
</para>
</note>

<para>It is a <glossterm>dynamic error</glossterm> if the method is
unrecognized.</para>

<para>If the <tag class="attribute">href</tag> attribute is present, the step attempts
to store the compressed data to the IRI specified. In this case, it produces a
<tag>c:result</tag> element on its <port>result</port> port that contains the
IRI where the data was stored.</para>

<para>If the
<tag class="attribute">href</tag> attribute is not present, the step returns
the compressed data in a <literal>base64</literal> encoded <tag>c:data</tag> element
with an appropriate <literal class="attribute">content-type</literal>.
</para>
</section>

<section xml:id="uncompress">
<title>pxp:uncompress</title>

<para>A step for expanding compressed data.</para>

<p:declare-step type="pxp:uncompress">
  <p:input port="source"/>
  <p:output port="result"/>
  <p:option name="compression-method" e:type="xsd:string"/>
</p:declare-step>

<para>If the document that appears on the <port>source</port> port is
<literal>base64</literal> encoded, this step will decode and attempt to
uncompress the data. As a convenience, if the data is not encoded, the
XML document is simply passed through, like the <tag>p:identity</tag> step.</para>

<para>The <option>compression-method</option> option can be used to identify the
compression method used. Suggested values are
“<literal>bzip2</literal>”,
“<literal>compress</literal>”,
“<literal>gzip</literal>”, etc. If unspecified, implementations are free
to attempt to deduce the method from the data.</para>

<para>It is a <glossterm>dynamic error</glossterm> if:</para>

<itemizedlist>
<listitem>
<para>the compression method is unrecognized or
</para>
</listitem>
<listitem>
<para>the resulting, decoded and expanded data is not a well-formed
XML document.</para>
</listitem>
</itemizedlist>
</section>

<section xml:id="set-base-uri">
<title>pxp:set-base-uri</title>

<para>A step for changing the base URI of a document.</para>

<p:declare-step type="pxp:set-base-uri">
  <p:input port="source"/>
  <p:output port="result"/>
  <p:option name="uri" required="true" e:type="xsd:string"/>
</p:declare-step>

<para>The document that appears on the <port>source</port> port is copied
to the <port>result</port> port. The base URI of the copied document will
be the URI specified in the <option>uri</option> option. If the URI specified
is relative, it will be made absolute with respect to the base URI of
the option element.</para>
</section>

</article>
